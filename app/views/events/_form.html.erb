<%= form_for(event, html: { multipart: true }) do |f| %>
  <% if event.errors.any? %>
    <%= render 'shared/errors', object: event %>
  <% end %>

  <div class="row">
    <div class="field form-group col-sm-12 col-md-6">
      <%= f.label :language %>
      <%= f.select(:language_id, options_for_select(Language.all.order(events_count: 'desc' ).map {|p| [p.description, p.id, {'data-image' => p.flag_image.url(:micro)}]}), {}, { class: 'form-control' }) %>
    </div>
  </div>

  <div class="field form-group">
    <%= f.label :title %>
    <%= f.text_field :title, class: 'form-control' %>
  </div>

  <div class="field form-group">
    <%= f.label :event_bg_image %>
    <%= f.file_field :event_bg_image, class: 'form-control' %>
  </div>

  <div class="field form-group">
    <%= f.label :description %>
    <%= md_simple_editor  do %>
      <%= f.text_area :description, class: 'form-control' %>
    <% end %>
  </div>

  <div class="field form-group">
    <%= f.label :address %>
    <%= f.text_field :address, class: 'form-control' %>
  </div>

  <div class="row">
    <div class="field form-group col-sm-12 col-md-4">
      <%= f.label :starts_at %>
      <%= f.text_field :starts_at, class: 'form-control', id: 'datetimepicker1' %>
    </div>

    <div class="field form-group col-sm-12 col-md-4">
      <%= f.label :ends_at %>
      <%= f.text_field :ends_at, class: 'form-control', id: 'datetimepicker2' %>
    </div>

    <%= f.hidden_field :latitude, id: 'gmap_latitude' %>
    <%= f.hidden_field :longitude, id: 'gmap_longitude' %>
    <%= f.hidden_field :gmap_zoom, id: 'gmap_zoom' %>

    <div class="field form-group col-sm-12 col-md-4">
      <%= f.label :max_members %>
      <%= f.number_field :max_members, class: 'form-control' %>
    </div>
  </div>

  <div class="field form-group ">
    <small class="help-block"><%= t('events.click_on_map_to_choose_place') %></small>
    <div id="map" style='width: 920px; height: 400px;' class="img-responsive"></div>
  </div>

  <div class="actions">
    <%= f.submit class: 'btn btn-primary' %>
  </div>
<% end %>

<script src="//maps.google.com/maps/api/js?key=<%= Rails.application.secrets.google_map_api_key %>"></script>
<script src="//cdn.rawgit.com/mahnunchik/markerclustererplus/master/dist/markerclusterer.min.js"></script>
<script src='//cdn.rawgit.com/printercu/google-maps-utility-library-v3-read-only/master/infobox/src/infobox_packed.js' type='text/javascript'></script> <!-- only if you need custom infoboxes -->
<script type="application/javascript">
// flags in select
  $(document).ready(function(e) {
    try {
      $("body select").msDropDown();
    } catch(e) {
      alert(e.message);
    }
  });
//  /flags in select

  handler = Gmaps.build('Google');
  var markers_options = { draggable: true };
  handler.buildMap({
        provider: { auto_zoom: false },
        internal: {id: 'map'}},
      function(){
        markers = handler.addMarkers(<%= raw @hash.to_json %>, markers_options);
        handler.bounds.extendWith(markers);
        handler.fitMapToBounds();
        handler.getMap().setZoom(16);

        // Callback function
        _.each(markers, listenToDragDrop)

        // On click, clear markers, place a new one, update coordinates in the form
        google.maps.event.addListener(handler.getMap(), 'click', function(event) {
          clearOverlays();
          placeMarker(event.latLng);
          updateFormLocation(event.latLng);
        });
      });

  function listenToDragDrop(marker){
    google.maps.event.addListener(marker.getServiceObject(), 'dragend', function() {
      updateFormLocation(marker.getServiceObject().getPosition());
    });
  }

  // Other functions
  // Update form attributes with given coordinates
  function updateFormLocation(latLng) {
    $('#gmap_latitude').val(latLng.lat());
    $('#gmap_longitude').val(latLng.lng());
    $('#gmap_zoom').val(handler.getMap().getZoom());
  }

  // Add a marker with an open infowindow
  function placeMarker(latLng) {
    var marker = handler.addMarker({
      lat: latLng.lat(),
      lng: latLng.lng(),
      infowindow: '<div class="popup"><%= t('events.drag_me_and_adjust_the_zoom_level') %></p>'
    }, markers_options)

    markers.push(marker)

    // Set and open infowindow
    google.maps.event.trigger(marker.getServiceObject(), 'click');

    listenToDragDrop(marker);
  }

  // // Removes the overlays from the map, including the ones loaded with the map itself
  function clearOverlays() {
    handler.removeMarkers(markers);
    markers = [];
  }
</script>